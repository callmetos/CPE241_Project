package main

import (
	// --- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Import ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ---
	"car-rental-management/internal/config"
	"car-rental-management/internal/router" // <--- ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ: ‡∏•‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô "handlers" ‡∏≠‡∏≠‡∏Å

	// --- -------------------------------- ---
	"log"
	"net/http"
	"os"
	"time"
)

func main() {
	log.Println("Starting Car Rental API...")

	config.ConnectDB()
	log.Println("Database connection established.")

	// --- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ ---
	r := router.SetupRouter() // <--- ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ package router ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á (‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß)
	// --- -------------------- ---
	log.Println("HTTP router initialized.")

	port := os.Getenv("PORT")
	if port == "" {
		port = "8080"
	}

	server := &http.Server{
		Addr:         ":" + port,
		Handler:      r,
		ReadTimeout:  15 * time.Second,
		WriteTimeout: 15 * time.Second,
		IdleTimeout:  60 * time.Second,
	}

	log.Printf("üöÄ Server starting on port %s...", port)

	if err := server.ListenAndServe(); err != nil && err != http.ErrServerClosed {
		log.Fatalf("‚ùå Could not start server on port %s: %v\n", port, err)
	}

	log.Println("Server stopped.")
}
